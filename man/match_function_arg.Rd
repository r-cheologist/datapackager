% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/match_function_arg.R
\name{match_function_arg}
\alias{match_function_arg}
\title{match_function_arg}
\usage{
match_function_arg(arg, fun, fun_arg_name, several.ok = FALSE,
  default = NULL)
}
\arguments{
\item{arg}{An \code{R} object to be checked.}

\item{fun}{A \code{\link{function}} from which the argument to be checked
against is derived.}

\item{fun_arg_name}{A single \code{\link{character}} object determining which
argument of \code{fun} is used to check \code{arg} against.}

\item{several.ok}{Single \code{\link{logical}} specifying if arg should be
allowed to have more than one element (see \code{\link{match.arg}}).}

\item{default}{A default value for \code{arg} should it be
\code{\link{NULL}}.}
}
\description{
An extension of \code{\link{match.arg}} to check an argument
against an argument of a given function.
}
\examples{
# Have a look at the function/argument we are going to check against:
formals(read.table)
formals(read.table)[["numerals"]]

# This works
match_function_arg(
  "allow.loss",
   fun = read.table,
   fun_arg_name = "numerals")

# As thus this ...
match_function_arg(
  c("allow.loss", "no.loss"),
  fun = read.table,
  fun_arg_name = "numerals",
  several.ok = TRUE)

\dontrun{
# This doesn't
match_function_arg(
  "allow.floss",
  fun = read.table,
  fun_arg_name = "numerals")
}

# Here we give a default (for programming use)
match_function_arg(
  NULL,
  fun = read.table,
  fun_arg_name = "numerals",
  default = "warn.loss")
}
\seealso{
\code{link{match.arg}}, \code{\link{formals}}
}
